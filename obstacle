/*the goal of this program is to make the robot car move forward but stop when an obtacle is in range.
when the robot meets an obstacle it should stop and turn to the left and the right, if the is no obstacle
it should move forward*/

//[servo]
#include <Servo.h> //including library
Servo servo_tilt; // servo 


//[ultrasonic]
#define trigPin 13// define trigger pin as 13:
#define echoPin 12// define echo pin as 12:

 //[movement]define motor pins
#define motor1 8
#define motor2 7
#define speed1 5
#define speed2 6

 float duration, distance;
 int angle;
void setup() { 
  Serial.begin(9600);//initialize serial comunication at 9600 bits per second:
  pinMode(trigPin, OUTPUT);//set trigpin pin as output:
  pinMode(echoPin, INPUT);//set echopin pin as input

 servo_tilt.attach(11);
//set pins as outputs:
   for (int i=5 ;i<9 ;i++){
pinMode(i, OUTPUT);}
 digitalWrite(3, HIGH);//initialize standby pin:
}

void loop() { 

 // write a pulse to the HC-SR04 Trigger pin:
digitalWrite(trigPin, LOW);
delayMicroseconds(2);
digitalWrite(trigPin, HIGH);
delayMicroseconds(10);
digitalWrite(trigPin, LOW);

//measure the response from the HC-SR04 echo pin
duration = pulseIn(echoPin, HIGH);

//determine distance from duration
//use 343 meters per sec as speed of sound

distance =(duration / 2) * 0.0343;

//send results to serialmonitor
 Serial.print("Distance = ");
if ( distance <= 2){
  Serial.println("Out of range");
}
else {
  Serial.print(distance);
  Serial.println(" cm ");
  delay(50);
  }
 
//moves forward 
  forward();
//stop if an obstacle is in range:
if(distance <= 15 || distance <= 2 ){
 digitalWrite(8, 1);
 digitalWrite(7, 1);
 analogWrite(5, 0);
 analogWrite(6, 0); 
delay(1000);
//move left for half a second:
left();
delay(500);
//move right for a second:
right();
delay(1000);
 } 
 

}
/* funtions that make the robot move forward,backward,left,right,
forward left,forward right,backward left,backward right,  and stop respectively.*/
void forward(){
 digitalWrite(8, 1);
 digitalWrite(7, 1);
 analogWrite(5, 126);
 analogWrite(6, 126);
}
void backward(){
 digitalWrite(8, 0);
 digitalWrite(7, 0);
 analogWrite(5, 126);
 analogWrite(6, 126);
}
void left(){
 digitalWrite(8, 0);
 digitalWrite(7, 1);
 analogWrite(5, 126);
 analogWrite(6, 126);
}
 void right(){
 digitalWrite(8, 1);
 digitalWrite(7, 0);
 analogWrite(5, 126);
 analogWrite(6, 126);
}
 void forwardleft(){
 digitalWrite(8, 1);
 digitalWrite(7, 1);
 analogWrite(5, 126);
 analogWrite(6, 63);
}
 void forwardright(){
 digitalWrite(8, 1);
 digitalWrite(7, 1);
 analogWrite(5, 63);
 analogWrite(6, 126);
}
 void backwardleft(){
 digitalWrite(8, 0);
 digitalWrite(7, 0);
 analogWrite(5, 126);
 analogWrite(6, 63);
}
void backwardright(){
 digitalWrite(8, 0);
 digitalWrite(7, 0);
 analogWrite(5, 63);
 analogWrite(6, 126);
}
void stop(){
 digitalWrite(8, 1);
 digitalWrite(7, 1);
 analogWrite(5, 0);
 analogWrite(6, 0);
}
